{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useMergedState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useEvent = _interopRequireDefault(require(\"./useEvent\"));\n\nvar _useLayoutEffect = _interopRequireWildcard(require(\"./useLayoutEffect\"));\n\nvar _useState3 = _interopRequireDefault(require(\"./useState\"));\n\nvar Source;\n\n(function (Source) {\n  Source[Source[\"INNER\"] = 0] = \"INNER\";\n  Source[Source[\"PROP\"] = 1] = \"PROP\";\n})(Source || (Source = {}));\n/** We only think `undefined` is empty */\n\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\n\nfunction useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState; // ======================= Init =======================\n\n\n  var _useState = (0, _useState3.default)(function () {\n    var finalValue = undefined;\n    var source;\n\n    if (hasValue(value)) {\n      finalValue = value;\n      source = Source.PROP;\n    } else if (hasValue(defaultValue)) {\n      finalValue = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n      source = Source.PROP;\n    } else {\n      finalValue = typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n      source = Source.INNER;\n    }\n\n    return [finalValue, source, finalValue];\n  }),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      mergedValue = _useState2[0],\n      setMergedValue = _useState2[1];\n\n  var chosenValue = hasValue(value) ? value : mergedValue[0];\n  var postMergedValue = postState ? postState(chosenValue) : chosenValue; // ======================= Sync =======================\n\n  (0, _useLayoutEffect.useLayoutUpdateEffect)(function () {\n    setMergedValue(function (_ref2) {\n      var _ref3 = (0, _slicedToArray2.default)(_ref2, 1),\n          prevValue = _ref3[0];\n\n      return [value, Source.PROP, prevValue];\n    });\n  }, [value]); // ====================== Update ======================\n\n  var changeEventPrevRef = React.useRef();\n  var triggerChange = (0, _useEvent.default)(function (updater, ignoreDestroy) {\n    setMergedValue(function (prev) {\n      var _prev = (0, _slicedToArray2.default)(prev, 3),\n          prevValue = _prev[0],\n          prevSource = _prev[1],\n          prevPrevValue = _prev[2];\n\n      var nextValue = typeof updater === 'function' ? updater(prevValue) : updater; // Do nothing if value not change\n\n      if (nextValue === prevValue) {\n        return prev;\n      } // Use prev prev value if is in a batch update to avoid missing data\n\n\n      var overridePrevValue = prevSource === Source.INNER && changeEventPrevRef.current !== prevPrevValue ? prevPrevValue : prevValue;\n      return [nextValue, Source.INNER, overridePrevValue];\n    }, ignoreDestroy);\n  }); // ====================== Change ======================\n\n  var onChangeFn = (0, _useEvent.default)(onChange);\n  (0, _useLayoutEffect.default)(function () {\n    var _mergedValue = (0, _slicedToArray2.default)(mergedValue, 3),\n        current = _mergedValue[0],\n        source = _mergedValue[1],\n        prev = _mergedValue[2];\n\n    if (current !== prev && source === Source.INNER) {\n      onChangeFn(current, prev);\n      changeEventPrevRef.current = prev;\n    }\n  }, [mergedValue]);\n  return [postMergedValue, triggerChange];\n}","map":{"version":3,"sources":["/Users/sraju/Documents/github/relicstaurants/node_modules/rc-util/lib/hooks/useMergedState.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","useMergedState","_slicedToArray2","React","_useEvent","_useLayoutEffect","_useState3","Source","hasValue","undefined","defaultStateValue","option","_ref","defaultValue","onChange","postState","_useState","finalValue","source","PROP","INNER","_useState2","mergedValue","setMergedValue","chosenValue","postMergedValue","useLayoutUpdateEffect","_ref2","_ref3","prevValue","changeEventPrevRef","useRef","triggerChange","updater","ignoreDestroy","prev","_prev","prevSource","prevPrevValue","nextValue","overridePrevValue","current","onChangeFn","_mergedValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useMergedState;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _useEvent = _interopRequireDefault(require(\"./useEvent\"));\n\nvar _useLayoutEffect = _interopRequireWildcard(require(\"./useLayoutEffect\"));\n\nvar _useState3 = _interopRequireDefault(require(\"./useState\"));\n\nvar Source;\n\n(function (Source) {\n  Source[Source[\"INNER\"] = 0] = \"INNER\";\n  Source[Source[\"PROP\"] = 1] = \"PROP\";\n})(Source || (Source = {}));\n/** We only think `undefined` is empty */\n\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\n\nfunction useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState; // ======================= Init =======================\n\n\n  var _useState = (0, _useState3.default)(function () {\n    var finalValue = undefined;\n    var source;\n\n    if (hasValue(value)) {\n      finalValue = value;\n      source = Source.PROP;\n    } else if (hasValue(defaultValue)) {\n      finalValue = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n      source = Source.PROP;\n    } else {\n      finalValue = typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n      source = Source.INNER;\n    }\n\n    return [finalValue, source, finalValue];\n  }),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      mergedValue = _useState2[0],\n      setMergedValue = _useState2[1];\n\n  var chosenValue = hasValue(value) ? value : mergedValue[0];\n  var postMergedValue = postState ? postState(chosenValue) : chosenValue; // ======================= Sync =======================\n\n  (0, _useLayoutEffect.useLayoutUpdateEffect)(function () {\n    setMergedValue(function (_ref2) {\n      var _ref3 = (0, _slicedToArray2.default)(_ref2, 1),\n          prevValue = _ref3[0];\n\n      return [value, Source.PROP, prevValue];\n    });\n  }, [value]); // ====================== Update ======================\n\n  var changeEventPrevRef = React.useRef();\n  var triggerChange = (0, _useEvent.default)(function (updater, ignoreDestroy) {\n    setMergedValue(function (prev) {\n      var _prev = (0, _slicedToArray2.default)(prev, 3),\n          prevValue = _prev[0],\n          prevSource = _prev[1],\n          prevPrevValue = _prev[2];\n\n      var nextValue = typeof updater === 'function' ? updater(prevValue) : updater; // Do nothing if value not change\n\n      if (nextValue === prevValue) {\n        return prev;\n      } // Use prev prev value if is in a batch update to avoid missing data\n\n\n      var overridePrevValue = prevSource === Source.INNER && changeEventPrevRef.current !== prevPrevValue ? prevPrevValue : prevValue;\n      return [nextValue, Source.INNER, overridePrevValue];\n    }, ignoreDestroy);\n  }); // ====================== Change ======================\n\n  var onChangeFn = (0, _useEvent.default)(onChange);\n  (0, _useLayoutEffect.default)(function () {\n    var _mergedValue = (0, _slicedToArray2.default)(mergedValue, 3),\n        current = _mergedValue[0],\n        source = _mergedValue[1],\n        prev = _mergedValue[2];\n\n    if (current !== prev && source === Source.INNER) {\n      onChangeFn(current, prev);\n      changeEventPrevRef.current = prev;\n    }\n  }, [mergedValue]);\n  return [postMergedValue, triggerChange];\n}"]},"metadata":{},"sourceType":"script"}